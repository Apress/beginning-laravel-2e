//code 11.1
$ php artisan make:controller CreatemessageController –resource


//code 11.2
//app/Http/Controllers/ CreatemessageController.php
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\User;
use App\Message;
use App\Events\AboutTheUser;


class CreatemessageController extends Controller
{

  /**
   * Create a new controller instance.
   *
   * @return void
   */
  public function __construct()
  {
      $this->middleware('auth');
  }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
      if (Auth::check()){
        $messages = Message::get();
        return view('messages.index', compact('messages'));
      }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
      if( Auth::check() ){
          return view('messages.create');
      }
        return view('auth.login');

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        if(Auth::check()){
            $name = Auth::user();
            $message = Message::create([
                'user_id' => Auth::user()->id,
                'message' => $request->input('message')

            ]);

            if($name){

                //step one: fire the event
                event(New AboutTheUser($name));                

            }

        }
      }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
     public function show(Message $message)
     {
       if( Auth::check() ){
             $message = Message::find($message->id);
             return view('messages.show', ['message' => $message]);
       }
         return view('auth.login');

     }
}




//code 11.3
$ php artisan make:model Message -m



//code 11.4
//app/Message.php
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Message extends Model
{
    /**
     * Fields that are mass assignable
     *
     * @var array
     */
    protected $fillable = ['message', 'user_id'];

    /**
     * A message belong to a user
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }
}



//code 11.5
//app/User.php
<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * A user can have many messages
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function messages()
    {
        return $this->hasMany(Message::class);
    }
}



//code 11.6
//resources/views/messages/index.blade.php
<div class="blog-post">
            <ul class="list-group">
                 @foreach ($messages as $message)
                 <li class="list-group-item"><h2 class="blog-post-title">
                         <a href="/messages/{{ $message->id }}">{{ $message->message }}</a>
                     </h2>
                 </li>
                 <li><a href="/messages/{{ $message->id }}/edit">Edit</a></li>
                 @endforeach
            </ul>
                    </div>



//code 11.7
//resources/views/messages/show.blade.php
<div class="col-md-8 blog-main col-lg-8 blog-main col-sm-8 blog-main">
          <h3 class="pb-3 mb-4 font-italic border-bottom">
              <a href="/messages">The Message</a>
          </h3>
          <h3 class="pb-3 mb-4 font-italic border-bottom">
             {{ $message->message }} posted by {{ $message->user['name'] }}
          </h3>
        </div>



//code 11.8
//resources/views/messages/create.blade.php
<div class="col-md-8 blog-main col-lg-8 blog-main col-sm-8 blog-main">
          <h3 class="pb-3 mb-4 font-italic border-bottom">
            All Messages
          </h3>
            <div class="blog-post">
            <h2 class="blog-post-title"></h2>
             <form method="post" action="{{ route('messages.store') }}">
             {{ csrf_field() }}
             <div class="form-group">
             <label for="message">Name<span class="required">*</span></label>
             <input   placeholder="Enter message"
             id="message"
             required
             name="message"
             spellcheck="false"
             class="form-control"
             />
             </div>

             <div class="form-group">
             <input type="submit" class="btn btn-primary"
             value="Submit"/>
             </div>
             </form>
             </div>
        </div>




//code 11.9
//routes/web.php
Route::get('/', function () {
    return view('welcome');
});

Auth::routes();

Route::resource('messages', 'CreatemessageController');

Route::get('/home', 'HomeController@index')→name('home');



//code 11.10
ss@ss-H81M-S1:~/code/laraeventandlisteners$ php artisan make:event AboutTheUser
Event created successfully.



//code 11.11
//app/Events/AboutTheUser.php
<?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Queue\SerializesModels;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Support\Facades\Auth;
use App\User;

class AboutTheUser
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

public $name;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct($name)
    {
      $user = Auth::user();
      $this->name = $name;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new PrivateChannel('channel-name');
    }
}



//code 11.12
ss@ss-H81M-S1:~/code/laraeventandlisteners$ php artisan make:listener SendMailForNewMessage --event=AboutTheUser
Listener created successfully.
ss@ss-H81M-S1:~/code/laraeventandlisteners$ php artisan make:listener AlertForNewMessage
Listener created successfully.
ss@ss-H81M-S1:~/code/laraeventandlisteners$ php artisan make:listener AboutTheUser
Listener created successfully.



//code 11.13
//app/Providers/EventServiceProvider.php
//original one

<?php

namespace App\Providers;

use Illuminate\Support\Facades\Event;
use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     *
     * @return void
     */
    public function boot()
    {
        parent::boot();

        //
    }
}



//code 11.14
//app/Providers/EventServiceProvider.php
//changed code where the listen property takes new values

<?php

namespace App\Providers;

use Illuminate\Support\Facades\Event;
use Illuminate\Auth\Events\Registered;
use App\Events\AboutTheUser;
use App\Listeners\SendMailForNewMessage;
use App\Listeners\AlertForNewMessage;
use App\Listeners\AboutTheUser;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        AboutTheUser::class => [
            AlertForNewMessage::class,
            AboutTheUser::class,
            SendMailForNewMessage::class,

        ],
    ];

    /**
     * Register any events for your application.
     *
     * @return void
     */
    public function boot()
    {
        parent::boot();

        //
    }
}



//code 11.15
//app/Listeners/AboutTheUser.php
<?php

namespace App\Listeners;

use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;

class AboutTheUser
{

    /**
     * Handle the event.
     *
     * @param  object  $event
     * @return void
     */
    public function handle($event)
    {
        dump('Check whether the user in your friend lists');
    }
}




//code 11.16
//app/Listeners/AlertForNewMessage.php
<?php

namespace App\Listeners;

use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Auth;
use App\User;

class AlertForNewMessage
{

    /**
     * Handle the event.
     *
     * @param  object  $event
     * @return void
     */
    public function handle($event)
    {
        //the event will handle the mail event
        dump('A new mesage has been posted on your post');
    }
}



//code 11.17
//app/Listeners/SendMailForNewMessage.php
<?php

namespace App\Listeners;

use App\Events\NewMessagePosted;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Auth;
use App\Mail\MailForNewMessage;

class SendMailForNewMessage
{
    /**
     * Handle the event.
     *
     * @param  NewMessagePosted  $event
     * @return void
     */
    public function handle(NewMessagePosted $event)
    {
        $user = Auth::user();
        Mail::to($user->email)->send(new MailForNewMessage());
    }
}



//code 11.18
//.env
MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=*****************
MAIL_PASSWORD=*****************
MAIL_ENCRYPTION=tls


//code 11.19
ss@ss-H81M-S1:~/code/laraeventandlisteners$ php artisan make:mail MailForNewMessage --markdown emails.new-message
Mail created successfully.



//code 11.20
//app/Mail/ MailForNewMessage.php
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Contracts\Queue\ShouldQueue;

class MailForNewMessage extends Mailable
{
    use Queueable, SerializesModels;

    /**
     * Build the message.
     *
     * @return $this
     */
    public function build()
    {
        return $this->markdown('emails.new-message');
    }
}



//code 11.21
@component('mail::message')
# New Message

Hi a new message have been just posted

@component('mail::button', ['url' => ''])
Button Text
@endcomponent

Thanks,<br>
{{ config('app.name') }}
@endcomponent



//code 11.22
$ php artisan event:generate



